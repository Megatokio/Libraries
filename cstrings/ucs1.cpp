/*	Copyright  (c)	Günter Woigk 2018 - 2019
					mailto:kio@little-bat.de

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

	Permission to use, copy, modify, distribute, and sell this software and
	its documentation for any purpose is hereby granted without fee, provided
	that the above copyright notice appear in all copies and that both that
	copyright notice and this permission notice appear in supporting
	documentation, and that the name of the copyright holder not be used
	in advertising or publicity pertaining to distribution of the software
	without specific, written prior permission.  The copyright holder makes no
	representations about the suitability of this software for any purpose.
	It is provided "as is" without express or implied warranty.

	THE COPYRIGHT HOLDER DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
	INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
	EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, INDIRECT OR
	CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
	DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
	TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
*/

#include <math.h>
#include "Libraries/kio/kio.h"
#include "ucs1.h"

#ifndef NAN
static const float NAN (0.0f/0.0f);
#endif


namespace ucs1
{
const uint8 gc_table[256] =
{
	// map code ranges -> General Category property
	// created from data generated by script GeneralCategory.vs
	// --> http://www.unicode.org/Public/12.0.0/ucd/UnicodeData.txt
	//     http://www.unicode.org/Public/12.0.0/ucd/UCD.html#General_Category_Values

	// 0x00
	U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc, U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc,
	U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc, U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc,
	U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc, U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc,
	U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc, U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc,
	// 0x20
	U_gc_zs,U_gc_po,U_gc_po,U_gc_po, U_gc_sc,U_gc_po,U_gc_po,U_gc_po,
	U_gc_ps,U_gc_pe,U_gc_po,U_gc_sm, U_gc_po,U_gc_pd,U_gc_po,U_gc_po,
	U_gc_nd,U_gc_nd,U_gc_nd,U_gc_nd, U_gc_nd,U_gc_nd,U_gc_nd,U_gc_nd,
	U_gc_nd,U_gc_nd,U_gc_po,U_gc_po, U_gc_sm,U_gc_sm,U_gc_sm,U_gc_po,
	// 0x40
	U_gc_po,U_gc_lu,U_gc_lu,U_gc_lu, U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu,
	U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu, U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu,
	U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu, U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu,
	U_gc_lu,U_gc_lu,U_gc_lu,U_gc_ps, U_gc_po,U_gc_pe,U_gc_sk,U_gc_pc,
	// 0x60
	U_gc_sk,U_gc_ll,U_gc_ll,U_gc_ll, U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll,
	U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll, U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll,
	U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll, U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll,
	U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ps, U_gc_sm,U_gc_pe,U_gc_sm,U_gc_cc,
	// 0x80
	U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc, U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc,
	U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc, U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc,
	U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc, U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc,
	U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc, U_gc_cc,U_gc_cc,U_gc_cc,U_gc_cc,
	// 0xA0
	U_gc_zs,U_gc_po,U_gc_sc,U_gc_sc, U_gc_sc,U_gc_sc,U_gc_so,U_gc_po,
	U_gc_sk,U_gc_so,U_gc_lo,U_gc_pi, U_gc_sm,U_gc_cf,U_gc_so,U_gc_sk,
	U_gc_so,U_gc_sm,U_gc_no,U_gc_no, U_gc_sk,U_gc_ll,U_gc_po,U_gc_po,
	U_gc_sk,U_gc_no,U_gc_lo,U_gc_pf, U_gc_no,U_gc_no,U_gc_no,U_gc_po,
	// 0xC0
	U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu, U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu,
	U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu, U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu,
	U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu, U_gc_lu,U_gc_lu,U_gc_lu,U_gc_sm,
	U_gc_lu,U_gc_lu,U_gc_lu,U_gc_lu, U_gc_lu,U_gc_lu,U_gc_lu,U_gc_ll,
	// 0xE0
	U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll, U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll,
	U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll, U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll,
	U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll, U_gc_ll,U_gc_ll,U_gc_ll,U_gc_sm,
	U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll, U_gc_ll,U_gc_ll,U_gc_ll,U_gc_ll,
};

float numeric_value (ucs1char c) noexcept
{
	// Get Digit, Number & Decorated Number value.
	// returns Value for all codes for which has_numeric_value() returnes true.
	// returns NaN for all others

	if (is_in_range('0',c,'9')) return c - '0';

	switch(c)
	{
	case 0xb2: return 2;	 // ²
	case 0xb3: return 3;	 // ³
	case 0xb9: return 1;	 // ¹
	case 0xbc: return 0.25f; // ¼
	case 0xbd: return 0.5f;  // ½
	case 0xbe: return 0.75f; // ¾
	}

	return NAN;
}

bool isupperstr	(ucs1cstr s) noexcept
{
	// Test if string is all upper case

    if(s) while(*s)
    {
		if (is_uppercase(*s++)) continue;
		else return no;
	}
    return yes;
}

bool islowerstr	(ucs1cstr s) noexcept
{
	// Test if string is all lower case

    if(s) while(*s)
    {
		if (is_lowercase(*s++)) continue;
		else return no;
	}
    return yes;
}

ucs1str lowerstr (ucs1cstr s) throws
{
	// Convert a string to all lower case

    ucs1str t = dupstr(s);
    tolower(t);
    return t;
}

ucs1str upperstr (ucs1cstr s) throws
{
	// Convert a string to all upper case
	// 'µ', 'ÿ' and 'ß' are not converted, because they don't have an uppercase version in UCS-1

	ucs1str t = dupstr(s);
	toupper(t);
	return t;
}


} // namespace


















